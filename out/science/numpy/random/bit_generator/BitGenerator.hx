/* This file is generated, do not edit! */
package numpy.random.bit_generator;
@:pythonImport("numpy.random.bit_generator", "BitGenerator") extern class BitGenerator {
	public function __class__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Implement delattr(self, name).
	**/
	public function __delattr__(name:Dynamic):Dynamic;
	/**
		Default dir() implementation.
	**/
	public function __dir__():Dynamic;
	static public var __doc__ : Dynamic;
	/**
		Return self==value.
	**/
	public function __eq__(value:Dynamic):Dynamic;
	/**
		Default object formatter.
	**/
	public function __format__(format_spec:Dynamic):Dynamic;
	/**
		Return self>=value.
	**/
	public function __ge__(value:Dynamic):Dynamic;
	/**
		Return getattr(self, name).
	**/
	public function __getattribute__(name:Dynamic):Dynamic;
	public function __getstate__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Return self>value.
	**/
	public function __gt__(value:Dynamic):Dynamic;
	/**
		Return hash(self).
	**/
	public function __hash__():Dynamic;
	/**
		Initialize self.  See help(type(self)) for accurate signature.
	**/
	@:native("__init__")
	public function ___init__(?args:python.VarArgs<Dynamic>, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	/**
		Initialize self.  See help(type(self)) for accurate signature.
	**/
	public function new(?args:python.VarArgs<Dynamic>, ?kwargs:python.KwArgs<Dynamic>):Void;
	/**
		This method is called when a class is subclassed.
		
		The default implementation does nothing. It may be
		overridden to extend subclasses.
	**/
	public function __init_subclass__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Return self<=value.
	**/
	public function __le__(value:Dynamic):Dynamic;
	/**
		Return self<value.
	**/
	public function __lt__(value:Dynamic):Dynamic;
	/**
		Return self!=value.
	**/
	public function __ne__(value:Dynamic):Dynamic;
	/**
		Create and return a new object.  See help(type) for accurate signature.
	**/
	static public function __new__(?args:python.VarArgs<Dynamic>, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	/**
		Helper for pickle.
	**/
	public function __reduce__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Helper for pickle.
	**/
	public function __reduce_ex__(protocol:Dynamic):Dynamic;
	/**
		Return repr(self).
	**/
	public function __repr__():Dynamic;
	/**
		Implement setattr(self, name, value).
	**/
	public function __setattr__(name:Dynamic, value:Dynamic):Dynamic;
	public function __setstate__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Size of object in memory, in bytes.
	**/
	public function __sizeof__():Dynamic;
	/**
		Return str(self).
	**/
	public function __str__():Dynamic;
	/**
		Abstract classes can override this to customize issubclass().
		
		This is invoked early on by abc.ABCMeta.__subclasscheck__().
		It should return True, False or NotImplemented.  If it returns
		NotImplemented, the normal algorithm is used.  Otherwise, it
		overrides the normal algorithm (and the outcome is cached).
	**/
	public function __subclasshook__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Used in tests
	**/
	public function _benchmark(args:haxe.extern.Rest<Dynamic>):Dynamic;
	public var _cffi : Dynamic;
	public var _ctypes : Dynamic;
	public var _seed_seq : Dynamic;
	public var capsule : Dynamic;
	/**
		CFFI interface
		
		Returns
		-------
		interface : namedtuple
		    Named tuple containing CFFI wrapper
		
		    * state_address - Memory address of the state struct
		    * state - pointer to the state struct
		    * next_uint64 - function pointer to produce 64 bit integers
		    * next_uint32 - function pointer to produce 32 bit integers
		    * next_double - function pointer to produce doubles
		    * bitgen - pointer to the bit generator struct
	**/
	public var cffi : Dynamic;
	/**
		ctypes interface
		
		Returns
		-------
		interface : namedtuple
		    Named tuple containing ctypes wrapper
		
		    * state_address - Memory address of the state struct
		    * state - pointer to the state struct
		    * next_uint64 - function pointer to produce 64 bit integers
		    * next_uint32 - function pointer to produce 32 bit integers
		    * next_double - function pointer to produce doubles
		    * bitgen - pointer to the bit generator struct
	**/
	public var ctypes : Dynamic;
	public var lock : Dynamic;
	/**
		random_raw(self, size=None)
		
		Return randoms as generated by the underlying BitGenerator
		
		Parameters
		----------
		size : int or tuple of ints, optional
		    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then
		    ``m * n * k`` samples are drawn.  Default is None, in which case a
		    single value is returned.
		output : bool, optional
		    Output values.  Used for performance testing since the generated
		    values are not returned.
		
		Returns
		-------
		out : uint or ndarray
		    Drawn samples.
		
		Notes
		-----
		This method directly exposes the the raw underlying pseudo-random
		number generator. All values are returned as unsigned 64-bit
		values irrespective of the number of bits produced by the PRNG.
		
		See the class docstring for the number of bits returned.
	**/
	public function random_raw(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Get or set the PRNG state
		
		The base BitGenerator.state must be overridden by a subclass
		
		Returns
		-------
		state : dict
		    Dictionary containing the information required to describe the
		    state of the PRNG
	**/
	public var state : python.Dict<Dynamic, Dynamic>;
}