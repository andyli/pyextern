/* This file is generated, do not edit! */
package tensorflow.python.tpu.datasets;
@:pythonImport("tensorflow.python.tpu.datasets") extern class Datasets_Module {
	/**
		Callable type; Callable[[int], str] is a function of (int) -> str.
		
		The subscription syntax must always be used with exactly two
		values: the argument list and the return type.  The argument list
		must be a list of types or ellipsis; the return type must be a single type.
		
		There is no syntax to indicate optional or keyword arguments,
		such function types are rarely used as callback types.
	**/
	static public function Callable(?args:python.VarArgs<Dynamic>, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	static public function Optional(?args:python.VarArgs<Dynamic>, ?kwds:python.KwArgs<Dynamic>):Dynamic;
	/**
		StreamingFilesDataset constructs a dataset to stream from workers (GCE VM).
		
		Because Cloud TPUs are allocated over the network, a Cloud TPU cannot read
		files local to your GCE VM. In order to train using files stored on your local
		VM (e.g. on local SSD for extreme performance), use the StreamingFilesDataset
		helper to generate a dataset to feed your Cloud TPU with files from your GCE
		VM.
		
		The resulting dataset may return an OutOfRangeError if there are no files
		found as a result of the fileglob expansion.
		
		Note: StreamingFilesDataset assumes that the session is using a
		TPUClusterResolver and has therefore a worker and a coordinator job. File
		loading will be done on the coordinator job.
		
		Args:
		  files: A string glob to match files, or a `tf.data.Dataset` generating file
		    names.
		  filetype: A string (one of 'tfrecord', or 'textline') or a single-argument
		    TensorFlow function that when given a filename returns a dataset.
		  file_reader_job: An optional string that corresponds to the job that should
		    perform the file reads.
		  worker_job: An optional string that corresponds to the job that should
		    process the tensors (i.e. your GPU or TPU worker).
		  num_epochs: The number of epochs through the training set that should be
		    generated. By default, it will repeat infinitely.
		  filename_shuffle_buffer_size: An optional integer whose value controls the
		    shuffling of the file names. If you would like to read from the files in
		    the same order, set to 0 or False.
		  num_parallel_reads: An optional integer controlling the number of files to
		    read from concurrently. (Set to 1 for no parallelism.)
		  batch_transfer_size: An optional integer controlling the batching used to
		    amortize the remote function invocation overhead. Set to a very large
		    number to increase throughput. Set to a very small number to reduce memory
		    consumption. Set to False to skip batching.
		  sloppy: (Optional.) If `False`, read input data while maintaining a
		    deterministic order. (This may have significant performance impacts.)
		    sloppy defaults to: True.
		Returns:
		  A `tf.data.Dataset` with an infinite stream of elements generated by a
		  parallel interleaving of the set of files matched (or generated) by `files`
		  with a type is the output of the dataset specified by `filetype`.
		
		Raises:
		  ValueError: if any argument is not of the expected type.
	**/
	static public function StreamingFilesDataset(files:Dynamic, ?filetype:Dynamic, ?file_reader_job:Dynamic, ?worker_job:Dynamic, ?num_epochs:Dynamic, ?filename_shuffle_buffer_size:Dynamic, ?num_parallel_reads:Dynamic, ?batch_transfer_size:Dynamic, ?sloppy:Dynamic):Dynamic;
	static public function Union(?args:python.VarArgs<Dynamic>, ?kwds:python.KwArgs<Dynamic>):Dynamic;
	static public var _FILETYPE_MAP : Dynamic;
	static public function _TFRecordDataset(filename:Dynamic):Dynamic;
	static public function _TextLineDataset(filename:Dynamic):Dynamic;
	static public var __builtins__ : Dynamic;
	static public var __cached__ : Dynamic;
	static public var __doc__ : Dynamic;
	static public var __file__ : Dynamic;
	static public var __loader__ : Dynamic;
	static public var __name__ : Dynamic;
	static public var __package__ : Dynamic;
	static public var __spec__ : Dynamic;
	static public var absolute_import : Dynamic;
	static public var division : Dynamic;
	static public var print_function : Dynamic;
}